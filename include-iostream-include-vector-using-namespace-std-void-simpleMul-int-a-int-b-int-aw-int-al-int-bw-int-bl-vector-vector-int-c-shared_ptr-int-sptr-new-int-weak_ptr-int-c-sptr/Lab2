#include <iostream>
#include <vector>
using namespace std;
void simpleMul(int** a, int** b, int aw, int al, int bw, int bl)
{
	 vector<vector<int> > c;
	shared_ptr<int**> sptr(new int*);
	weak_ptr<int**> c(sptr);
	//int** c = new int*[al];
	vector<vector<int >>::iterator v = c.begin();
	vector<int> k;
	for (int i = 0; i < al; ++i){
		for (int j = 0; j < aw; ++j)
		{

			k.push_back(i + j);
		}

		c.push_back(k);
	}
	if (aw == bl)
	{

		vector<vector<int>>::iterator v = c.begin();
		int i = 0;
		int j = 0;
		while (v != c.end()) {
			
			
			vector<int>::iterator r = v->begin();
			while (r != v->end())
				{
				for (int k = 0; k<bw; k++)
				{
					*r = *r + a[i][k] * b[k][j];
					cout << *r;
				}
				r++;
				j++;
				}
			v++;
			i++;
			j = 0;
			}
		
		}



		
	
	else
	{
		cout << "\n\nMultiplication is not possible";
	}


	return ;




}


int** strassenMul(int** a, int** b)
{
	int m1, m2, m3, m4, m5, m6, m7, i, j;
	int aw = 2;
	int al = 2;
	int bw = 2;
	int bl = 2;
	int** c = new int*[al];
	for (int i = 0; i < al; ++i)
		c[i] = new int[bw];
	m1 = (a[0][0] + a[1][1])*(b[0][0] + b[1][1]);
	m2 = (a[1][0] + a[1][1])*b[0][0];
	m3 = a[0][0] * (b[0][1] - b[1][1]);
	m4 = a[1][1] * (b[1][0] - b[0][0]);
	m5 = (a[0][0] + a[0][1])*b[1][1];
	m6 = (a[1][0] - a[0][0])*(b[0][0] + b[0][1]);
	m7 = (a[0][1] - a[1][1])*(b[1][0] + b[1][1]);
	c[0][0] = m1 + m4 - m5 + m7;
	c[0][1] = m3 + m5;
	c[1][0] = m2 + m4;
	c[1][1] = m1 - m2 + m3 + m6;

	for (i = 0; i<2; i++)
	{
		for (j = 0; j<2; j++)
		{

			cout << c[i][j];
		}
		cout << "\n";
	}


	return c;


}
